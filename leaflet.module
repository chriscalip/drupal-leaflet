<?php
/**
 * @file
 * Leaflet module.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function leaflet_ctools_plugin_api($module, $api) {
  return array(
    'version' => 1,
    'path' => drupal_get_path('module', 'leaflet') . '/includes',
  );
}

/**
 * Implements hook_permission().
 */
function leaflet_permission() {
  return array(
    'administer leaflet' => array(
      'title' => t('Administer Leaflet'),
      'description' => t('Configure Leaflet settings, styles, maps, and layers.'),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function leaflet_element_info() {
  return array(
    'leaflet' => array(
      '#input' => FALSE,
      '#tree' => TRUE,
      '#process' => array('leaflet_element_process_callback'),
      '#pre_render' => array('leaflet_element_prerender_callback'),
      '#theme_wrappers' => array('form_element'),
    ),
  );
}

/**
 * Process callback for the leaflet form element.
 *
 * Renders the map and returns the markup in an renderable array.
 */
function leaflet_element_process_callback($element, $form_state, $complete_form) {
  /* @var \Drupal\leaflet\Types\Map $map */
  if (($map = \Drupal\leaflet\Leaflet::load('Map', $element['#map'])) == TRUE) {
    $element['map'] = $map->build();
  }

  return $element;
}

/**
 * Pre render callback for the leaflet form element.
 */
function leaflet_element_prerender_callback($element) {
  if (empty($element['map'])) {
    /* @var \Drupal\leaflet\Types\Map $map */
    if (($map = \Drupal\leaflet\Leaflet::load('Map', $element['#map'])) == TRUE) {
      $element['map'] = $map->build();
    }
  }

  return $element;
}

/**
 * Implements hook_i18n_string_info().
 */
function leaflet_i18n_string_info() {
  $groups['leaflet'] = array(
    'title' => t('Leaflet'),
    'format' => TRUE,
  );
  return $groups;
}

/**
 * Translate a string using i18n_string, if available.
 *
 * @param string $name
 *   Textgroup and context glued with ':'.
 * @param string $default
 *   String in default language. Default language may or may not be English.
 * @param array $options
 *   An associative array of additional options, with the following keys:
 *   - langcode: the language code to translate to a language other than what is
 *     used to display the page; defaults to the current language
 *   - filter: filtering callback to apply to the translated string only
 *   - format: input format to apply to the translated string only
 *   - callback: callback to apply to the result (both to the translated or
 *     untranslated string)
 *   - update: whether to update source table; defaults to FALSE
 *   - translate: whether to return a translation; defaults to TRUE.
 *
 * @return string
 *   The translated string if i18n_string is available, the original otherwise.
 *
 * @see i18n_string()
 */
function leaflet_i18n_string($name, $default, $options = array()) {
  if (module_exists('i18n_string')) {
    $result = i18n_string($name, $default, $options);
  }
  else {
    $result = $default;
    $options += array(
      'format' => NULL,
      'sanitize' => FALSE,
    );
    if ($options['sanitize']) {
      $result = check_markup($result, $options['format']);
    }
  }

  return $result;
}

/**
 * Wrapper to update / create translation source for user defined strings.
 *
 * Wrapper around i18n_string_update() that ensures the module is available.
 *
 * @param string|array $name
 *   Array or string concatenated with ':' that contains textgroup and string
 *   context.
 * @param string $string
 *   Source string in default language. Default language may or may not be
 *   English. Array of key => string to update multiple strings at once.
 * @param array $options
 *   Array with additional options:
 *   - 'format', String format if the string has text format
 *   - 'messages', Whether to print out status messages.
 *
 * @return mixed
 *   Same return as from i18n_string_update()
 *
 * @see i18n_string_update()
 */
function leaflet_i18n_string_update($name, $string, $options = array()) {
  if (module_exists('i18n_string')) {
    return i18n_string_update($name, $string, $options);
  }
}

/**
 * Wrapper to remove source and translations for user defined string.
 *
 * Though for most strings the 'name' or 'string id' uniquely identifies that
 * string, there are some exceptions (like profile categories) for which we need
 * to use the source string itself as a search key.
 *
 * @param string $name
 *   String name.
 * @param string $string
 *   Optional source string (string in default language).
 * @param array $options
 *   Array of string properties to remove.
 *
 * @return mixed
 *   Same return as from i18n_string_remove()
 *
 * @see i18n_string_remove()
 */
function leaflet_i18n_string_remove($name, $string = NULL, $options = array()) {
  if (module_exists('i18n_string')) {
    return i18n_string_remove($name, $string, $options);
  }
}

/**
 * Implements hook_i18n_string_refresh().
 */
function leaflet_i18n_string_refresh() {
  foreach (\Drupal\leaflet\Leaflet::getPluginTypes() as $type) {
    foreach (\Drupal\leaflet\Leaflet::loadAllExportable($type) as $machine_name => $exportable) {
      $object = \Drupal\leaflet\Leaflet::load($type, $exportable);
      $object->i18nStringsRefresh();
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function leaflet_libraries_info() {
  $js_css_group = 'leaflet';
  if (class_exists('\Drupal\leaflet\Config')) {
    $js_css_group = \Drupal\leaflet\Config::get('leaflet.js_css.group');
  }

  $info = system_get_info('module', 'leaflet');
  $version = $info['version'] ? $info['version'] : '7.x-3.x';
  $module_path = drupal_get_path('module', 'leaflet');

  $libraries['leaflet_integration'] = array(
    'name' => 'Leaflet 3 Drupal integration files',
    'vendor url' => 'https://drupal.org/project/leaflet',
    'download url' => 'https://drupal.org/project/leaflet',
    'version' => $version,
    'library path' => $module_path,
    'files' => array(
      'js' => array(
        $module_path . '/js/leaflet.js' => array(
          'data' => $module_path . '/js/leaflet.js',
          'type' => 'file',
          'weight' => 8,
          'group' => $js_css_group,
        ),
        $module_path . '/js/leaflet.pluginManager.js' => array(
          'data' => $module_path . '/js/leaflet.pluginManager.js',
          'type' => 'file',
          'weight' => 12,
          'group' => $js_css_group,
        ),
        $module_path . '/js/leaflet.behaviors.js' => array(
          'data' => $module_path . '/js/leaflet.behaviors.js',
          'type' => 'file',
          'weight' => 14,
          'group' => $js_css_group,
        ),
      ),
      'css' => array(
        $module_path . '/css/leaflet.css' => array(
          'data' => $module_path . '/css/leaflet.css',
          'type' => 'file',
          'weight' => 4,
          'group' => $js_css_group,
        ),
      ),
    ),
    'variants' => array(
      'debug' => array(
        'files' => array(
          'js' => array(
            'js/leaflet.js' => array(
              'type' => 'file',
              'weight' => 8,
              'group' => $js_css_group,
            ),
            'js/leaflet.pluginManager.js' => array(
              'type' => 'file',
              'weight' => 12,
              'group' => $js_css_group,
            ),
            'js/leaflet.behaviors.js' => array(
              'type' => 'file',
              'weight' => 14,
              'group' => $js_css_group,
            ),
            'js/leaflet.console.js' => array(
              'type' => 'file',
              'weight' => 16,
              'group' => $js_css_group,
            ),
            'js/leaflet.debug.js' => array(
              'type' => 'file',
              'weight' => 18,
              'group' => $js_css_group,
            ),
          ),
          'css' => array(
            'css/leaflet.css' => array(
              'type' => 'file',
              'weight' => 4,
              'group' => $js_css_group,
            ),
          ),
        ),
      ),
    ),
  );

  $libraries['leaflet'] = array(
    'name' => 'Leaflet',
    'vendor url' => 'http://leafletjs.com/',
    'download url' => 'http://cdn.leafletjs.com/downloads/leaflet-1.0.0-b1.zip',
    'version callback' => array('\Drupal\leaflet\Leaflet', 'getLibraryVersion'),
    'version arguments' => array(),
    'library path' => $module_path,
    // This is taken in account if the module libraries_cdn is enabled.
    'cdn' => array(
      'aliases' => array('leaflet'),
      'options' => array(
        'weight' => 0,
        'group' => $js_css_group,
      ),
      'request' => array(
        // Maximum 10 seconds for the http requests to CDNs.
        'timeout' => 10,
      ),
    ),
    'variants' => array(),
    'dependencies' => array(
      'leaflet_integration',
    ),
  );


  if ($version = \Drupal\leaflet\Leaflet::getLocalLibraryVersion()) {
    unset($libraries['leaflet']['library path']);
    $libraries['leaflet']['variants']['local:' . $version] = array(
      'name' => 'Leaflet ' . $version,
      'files' => array(
        'js' => array(
          'leaflet.js' => array(
            'type' => 'file',
            'weight' => 6,
            'group' => $js_css_group,
          ),
        ),
        'css' => array(
          'leaflet.css' => array(
            'type' => 'file',
            'weight' => 4,
            'group' => $js_css_group,
          ),
        ),
      ),
    );
  }

  return $libraries;
}

/**
 * Implements hook_hook_info().
 */
function leaflet_hook_info() {
  $hooks = array(
    'leaflet_object_preprocess_alter',
    'leaflet_object_postprocess_alter',
  );

  return array_fill_keys($hooks, array('group' => 'leaflet'));
}
